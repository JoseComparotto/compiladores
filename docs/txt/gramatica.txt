(*
    Observações:

    Gramática definida conforme a espeficicação da notação EBNF (ISO / IEC 14977).
    Referência: https://pt.m.wikipedia.org/wiki/Formalismo_de_Backus-Naur_Estendido

    As palavras reservadas estão no idioma Japonês.

    A linguagem é fracamente tipada.
*)

<program> = <context>;

(* Escopos *)
<context-block> = '{', <context>, '}' | <instruction>;

<context> = { <instruction> };

(* Instruções: Comandos e Estruturas *)
<instruction> = <command>, ';' | <structure>;

<command> = 
    <output-command> |
    <assign-command>;

<structure> =
    <conditional-structure> |
    <repeat-structure>;

(* Comando de entrada *)
<input-value> = '?';
<input-line> = '??';

(* Comando de saída. Aceita um, ou vários parâmetros *)
<output-command> =
    'kaku', '(', <value> ,')';

(* Comando de atribuição *)
<assign-command> = <identifier>,':=', <value>;

(* Estrutura condicional *)
<conditional-structure> =
    'moshi', '(' , <value>, ')', <context-block> |
    'moshi', '(' , <value>, ')', <context-block>, 'soreigai', <context-block>;

(* Estrutura de repetição "para" *)
<repeat-structure> =   
    'tameni', <identifier>,
    'kara', <value>,
    'made', <value>,
    'ho', <value>,
    <context-block> |   
    'tameni', <identifier>,     
    'kara', <value>,
    'made', <value>,
    <context-block>;

(* Expressões *)
<value> = <concat-expression>;

(* Expressão de concatenação *)
<concat-expression> = 
    <concat-expression>,
    <concat-operator>,
    <logic-or-expression>
| 
    <logic-or-expression>;

(* Expressões Lógicas *)
<logic-or-expression> = 
    <logic-or-expression>,
    <logic-or-operator>,
    <logic-and-expression>
| 
    <logic-and-expression>;

<logic-and-expression> = 
    <logic-and-expression>,
    <logic-and-operator>,
    <logic-not-expression>
| 
    <logic-not-expression>;

<logic-not-expression> = 
    <logic-not-operator>,
    <rel-expression>
| 
    <rel-expression>;

(* Expressões Relacionais *)
<rel-expression> = 
    <aritm-add-binary-expression>,
    <rel-operator>,
    <aritm-add-binary-expression>
| 
    <aritm-add-binary-expression>;

(* Expressões Aritméticas *)
<aritm-add-binary-expression> = 
    <aritm-add-binary-expression>,
    <aritm-add-operator>,
    <aritm-mult-binary-expression>
| 
    <aritm-mult-binary-expression>;

<aritm-mult-binary-expression> = 
    <aritm-mult-binary-expression>,
    <aritm-mult-operator>,
    <aritm-unary-expression>
|   
    <aritm-unary-expression>;

<aritm-unary-expression> =
    <aritm-add-operator>,
    <primitive-value>
|
    <primitive-value>;

<primitive-value> = <const> | <identifier> | '(', <value>,  ')' | <input-value> | <input-line>;


(* Identificador de variaveis: *)
<identifier> = <letter>, { <alpha> };

(* Constantes (literais) *)
<const> = <text-literal> | <number-literal> | <bool-literal>;
<number-literal> = <digit>, { <digit> } | <digit>, { <digit> }, '.', <digit>, { <digit> };
<bool-literal> = 'shin' | 'nise'; 
<text-literal> = '"', { <any> - '"' }, '"';

(* Operadores *)
<concat-operator> = '.';
<aritm-add-operator> = '+' | '-';
<aritm-mult-operator> = '*' | '/';
<aritm-operator> = <aritm-add-operator> | <aritm-mult-operator>;
<rel-operator> = '==' | '!=' | '<=' | '>=' | '<' | '>';
<logic-or-operator> ='mata';
<logic-and-operator> = 'mo';
<logic-not-operator> = 'shinai';

(* Classes de caracteres: *)
<any> = <alpha> | <special> | <blank>;
<alpha> = <letter> | <digit>;
<digit> = '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9';
<letter> = '_' | 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z';
<special> = '=' | ':' | '+' | '-' | '*' | '/' | '>' | '<' | '!' | '.' | ',' | '(' | ')' | '{' | '}' | ';' | '"';
<blank> = ' ' | '\n' | '\t';
