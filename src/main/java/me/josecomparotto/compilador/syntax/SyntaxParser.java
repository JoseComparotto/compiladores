
//----------------------------------------------------
// The following code was generated by CUP v0.10j
// Sun May 21 17:59:35 UTC 2023
//----------------------------------------------------

package me.josecomparotto.compilador.syntax;

import me.josecomparotto.compilador.lexical.*;
import me.josecomparotto.compilador.semantic.*;
import me.josecomparotto.compilador.semantic.value.expression.*;
import me.josecomparotto.compilador.semantic.instruction.*;
import me.josecomparotto.compilador.semantic.value.literal.*;
import me.josecomparotto.compilador.semantic.value.*;

/** CUP v0.10j generated parser.
  * @version Sun May 21 17:59:35 UTC 2023
  */
public class SyntaxParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SyntaxParser() {super();}

  /** Constructor which sets the default scanner. */
  public SyntaxParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\107\000\002\003\003\000\002\002\004\000\002\004" +
    "\005\000\002\005\003\000\002\005\004\000\002\006\004" +
    "\000\002\006\003\000\002\007\003\000\002\007\003\000" +
    "\002\012\003\000\002\012\003\000\002\020\003\000\002" +
    "\021\003\000\002\010\006\000\002\011\005\000\002\013" +
    "\003\000\002\013\003\000\002\015\011\000\002\014\007" +
    "\000\002\016\013\000\002\016\011\000\002\017\003\000" +
    "\002\022\005\000\002\022\003\000\002\023\005\000\002" +
    "\023\003\000\002\024\005\000\002\024\003\000\002\025" +
    "\004\000\002\025\003\000\002\026\005\000\002\026\005" +
    "\000\002\026\005\000\002\026\005\000\002\026\005\000" +
    "\002\026\005\000\002\026\003\000\002\030\005\000\002" +
    "\030\005\000\002\030\003\000\002\031\005\000\002\031" +
    "\005\000\002\031\003\000\002\027\004\000\002\027\004" +
    "\000\002\027\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\005\000\002\032\003\000\002\032\003\000\002\033" +
    "\003\000\002\034\003\000\002\035\003\000\002\036\003" +
    "\000\002\037\003\000\002\040\003\000\002\041\003\000" +
    "\002\042\003\000\002\043\003\000\002\044\003\000\002" +
    "\045\003\000\002\050\003\000\002\051\003\000\002\052" +
    "\003\000\002\053\003\000\002\046\003\000\002\047\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\160\000\012\005\006\006\015\010\014\045\020\001" +
    "\002\000\016\002\ufffe\005\ufffe\006\ufffe\010\ufffe\042\ufffe" +
    "\045\ufffe\001\002\000\014\002\001\005\006\006\015\010" +
    "\014\045\020\001\002\000\004\037\160\001\002\000\016" +
    "\002\ufffb\005\ufffb\006\ufffb\010\ufffb\042\ufffb\045\ufffb\001" +
    "\002\000\004\004\157\001\002\000\004\002\156\001\002" +
    "\000\004\004\ufff9\001\002\000\016\002\ufff8\005\ufff8\006" +
    "\ufff8\010\ufff8\042\ufff8\045\ufff8\001\002\000\004\045\145" +
    "\001\002\000\004\037\133\001\002\000\016\002\ufff1\005" +
    "\ufff1\006\ufff1\010\ufff1\042\ufff1\045\ufff1\001\002\000\004" +
    "\004\ufffa\001\002\000\004\036\024\001\002\000\016\002" +
    "\ufff2\005\ufff2\006\ufff2\010\ufff2\042\ufff2\045\ufff2\001\002" +
    "\000\016\002\ufff7\005\ufff7\006\ufff7\010\ufff7\042\ufff7\045" +
    "\ufff7\001\002\000\030\014\031\015\050\016\035\021\033" +
    "\022\043\026\032\027\047\037\025\043\045\044\056\045" +
    "\034\001\002\000\030\014\uffcb\015\uffcb\016\uffcb\021\uffcb" +
    "\022\uffcb\026\uffcb\027\uffcb\037\uffcb\043\uffcb\044\uffcb\045" +
    "\uffcb\001\002\000\030\014\031\015\050\016\035\021\033" +
    "\022\043\026\032\027\047\037\025\043\045\044\056\045" +
    "\034\001\002\000\042\004\uffdd\012\uffdd\013\uffdd\017\uffdd" +
    "\020\uffdd\023\uffdd\026\032\027\047\030\106\031\117\032" +
    "\111\033\113\034\112\035\103\040\uffdd\041\uffdd\001\002" +
    "\000\046\004\uffcc\012\uffcc\013\uffcc\017\uffcc\020\uffcc\023" +
    "\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc" +
    "\032\uffcc\033\uffcc\034\uffcc\035\uffcc\040\uffcc\041\uffcc\001" +
    "\002\000\046\004\uffd7\012\uffd7\013\uffd7\017\uffd7\020\uffd7" +
    "\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031" +
    "\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\040\uffd7\041\uffd7" +
    "\001\002\000\046\004\uffbc\012\uffbc\013\uffbc\017\uffbc\020" +
    "\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc" +
    "\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc\040\uffbc\041" +
    "\uffbc\001\002\000\026\014\uffbe\015\uffbe\021\uffbe\022\uffbe" +
    "\026\uffbe\027\uffbe\037\uffbe\043\uffbe\044\uffbe\045\uffbe\001" +
    "\002\000\046\004\ufff6\012\ufff6\013\ufff6\017\ufff6\020\ufff6" +
    "\023\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6\031" +
    "\ufff6\032\ufff6\033\ufff6\034\ufff6\035\ufff6\040\ufff6\041\ufff6" +
    "\001\002\000\046\004\uffcf\012\uffcf\013\uffcf\017\uffcf\020" +
    "\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf" +
    "\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\040\uffcf\041" +
    "\uffcf\001\002\000\026\014\uffc7\015\uffc7\021\uffc7\022\uffc7" +
    "\026\uffc7\027\uffc7\037\uffc7\043\uffc7\044\uffc7\045\uffc7\001" +
    "\002\000\022\004\uffe6\012\uffe6\013\uffe6\017\uffe6\020\uffe6" +
    "\023\uffe6\040\uffe6\041\uffe6\001\002\000\046\004\uffd4\012" +
    "\uffd4\013\uffd4\017\uffd4\020\uffd4\023\uffd4\024\uffd4\025\uffd4" +
    "\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034" +
    "\uffd4\035\uffd4\040\uffd4\041\uffd4\001\002\000\022\004\uffe8" +
    "\012\uffe8\013\uffe8\017\065\020\uffe8\023\uffe8\040\uffe8\041" +
    "\uffe8\001\002\000\022\014\031\015\050\021\033\022\043" +
    "\037\025\043\045\044\056\045\034\001\002\000\016\004" +
    "\uffec\012\uffec\013\uffec\023\100\040\uffec\041\uffec\001\002" +
    "\000\046\004\ufff5\012\ufff5\013\ufff5\017\ufff5\020\ufff5\023" +
    "\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5\031\ufff5" +
    "\032\ufff5\033\ufff5\034\ufff5\035\ufff5\040\ufff5\041\ufff5\001" +
    "\002\000\022\004\uffe4\012\uffe4\013\uffe4\017\uffe4\020\uffe4" +
    "\023\uffe4\040\uffe4\041\uffe4\001\002\000\046\004\uffd2\012" +
    "\uffd2\013\uffd2\017\uffd2\020\uffd2\023\uffd2\024\uffd2\025\uffd2" +
    "\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034" +
    "\uffd2\035\uffd2\040\uffd2\041\uffd2\001\002\000\004\004\ufff3" +
    "\001\002\000\026\014\uffbd\015\uffbd\021\uffbd\022\uffbd\026" +
    "\uffbd\027\uffbd\037\uffbd\043\uffbd\044\uffbd\045\uffbd\001\002" +
    "\000\046\004\uffbb\012\uffbb\013\uffbb\017\uffbb\020\uffbb\023" +
    "\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb" +
    "\032\uffbb\033\uffbb\034\uffbb\035\uffbb\040\uffbb\041\uffbb\001" +
    "\002\000\026\014\031\015\050\021\033\022\043\026\032" +
    "\027\047\037\025\043\045\044\056\045\034\001\002\000" +
    "\046\004\uffda\012\uffda\013\uffda\017\uffda\020\uffda\023\uffda" +
    "\024\072\025\071\026\uffda\027\uffda\030\uffda\031\uffda\032" +
    "\uffda\033\uffda\034\uffda\035\uffda\040\uffda\041\uffda\001\002" +
    "\000\046\004\uffcd\012\uffcd\013\uffcd\017\uffcd\020\uffcd\023" +
    "\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd" +
    "\032\uffcd\033\uffcd\034\uffcd\035\uffcd\040\uffcd\041\uffcd\001" +
    "\002\000\022\014\031\015\050\021\033\022\043\037\025" +
    "\043\045\044\056\045\034\001\002\000\046\004\uffd0\012" +
    "\uffd0\013\uffd0\017\uffd0\020\uffd0\023\uffd0\024\uffd0\025\uffd0" +
    "\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034" +
    "\uffd0\035\uffd0\040\uffd0\041\uffd0\001\002\000\046\004\uffd3" +
    "\012\uffd3\013\uffd3\017\uffd3\020\uffd3\023\uffd3\024\uffd3\025" +
    "\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3" +
    "\034\uffd3\035\uffd3\040\uffd3\041\uffd3\001\002\000\020\004" +
    "\uffea\012\uffea\013\uffea\020\062\023\uffea\040\uffea\041\uffea" +
    "\001\002\000\046\004\uffd1\012\uffd1\013\uffd1\017\uffd1\020" +
    "\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1" +
    "\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\040\uffd1\041" +
    "\uffd1\001\002\000\030\014\031\015\050\016\035\021\033" +
    "\022\043\026\032\027\047\037\025\043\045\044\056\045" +
    "\034\001\002\000\030\014\uffc9\015\uffc9\016\uffc9\021\uffc9" +
    "\022\uffc9\026\uffc9\027\uffc9\037\uffc9\043\uffc9\044\uffc9\045" +
    "\uffc9\001\002\000\022\004\uffe9\012\uffe9\013\uffe9\017\065" +
    "\020\uffe9\023\uffe9\040\uffe9\041\uffe9\001\002\000\030\014" +
    "\031\015\050\016\035\021\033\022\043\026\032\027\047" +
    "\037\025\043\045\044\056\045\034\001\002\000\030\014" +
    "\uffc8\015\uffc8\016\uffc8\021\uffc8\022\uffc8\026\uffc8\027\uffc8" +
    "\037\uffc8\043\uffc8\044\uffc8\045\uffc8\001\002\000\022\004" +
    "\uffe7\012\uffe7\013\uffe7\017\uffe7\020\uffe7\023\uffe7\040\uffe7" +
    "\041\uffe7\001\002\000\046\004\uffd5\012\uffd5\013\uffd5\017" +
    "\uffd5\020\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5" +
    "\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\040" +
    "\uffd5\041\uffd5\001\002\000\026\014\031\015\050\021\033" +
    "\022\043\026\032\027\047\037\025\043\045\044\056\045" +
    "\034\001\002\000\026\014\uffbf\015\uffbf\021\uffbf\022\uffbf" +
    "\026\uffbf\027\uffbf\037\uffbf\043\uffbf\044\uffbf\045\uffbf\001" +
    "\002\000\026\014\uffc0\015\uffc0\021\uffc0\022\uffc0\026\uffc0" +
    "\027\uffc0\037\uffc0\043\uffc0\044\uffc0\045\uffc0\001\002\000" +
    "\026\014\031\015\050\021\033\022\043\026\032\027\047" +
    "\037\025\043\045\044\056\045\034\001\002\000\046\004" +
    "\uffd9\012\uffd9\013\uffd9\017\uffd9\020\uffd9\023\uffd9\024\uffd9" +
    "\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033" +
    "\uffd9\034\uffd9\035\uffd9\040\uffd9\041\uffd9\001\002\000\046" +
    "\004\uffd8\012\uffd8\013\uffd8\017\uffd8\020\uffd8\023\uffd8\024" +
    "\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8" +
    "\033\uffd8\034\uffd8\035\uffd8\040\uffd8\041\uffd8\001\002\000" +
    "\022\004\uffe5\012\uffe5\013\uffe5\017\uffe5\020\uffe5\023\uffe5" +
    "\040\uffe5\041\uffe5\001\002\000\030\014\031\015\050\016" +
    "\035\021\033\022\043\026\032\027\047\037\025\043\045" +
    "\044\056\045\034\001\002\000\030\014\uffca\015\uffca\016" +
    "\uffca\021\uffca\022\uffca\026\uffca\027\uffca\037\uffca\043\uffca" +
    "\044\uffca\045\uffca\001\002\000\020\004\uffeb\012\uffeb\013" +
    "\uffeb\020\062\023\uffeb\040\uffeb\041\uffeb\001\002\000\046" +
    "\004\uffd6\012\uffd6\013\uffd6\017\uffd6\020\uffd6\023\uffd6\024" +
    "\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6" +
    "\033\uffd6\034\uffd6\035\uffd6\040\uffd6\041\uffd6\001\002\000" +
    "\026\014\uffc1\015\uffc1\021\uffc1\022\uffc1\026\uffc1\027\uffc1" +
    "\037\uffc1\043\uffc1\044\uffc1\045\uffc1\001\002\000\026\014" +
    "\031\015\050\021\033\022\043\026\032\027\047\037\025" +
    "\043\045\044\056\045\034\001\002\000\026\014\031\015" +
    "\050\021\033\022\043\026\032\027\047\037\025\043\045" +
    "\044\056\045\034\001\002\000\026\014\uffc6\015\uffc6\021" +
    "\uffc6\022\uffc6\026\uffc6\027\uffc6\037\uffc6\043\uffc6\044\uffc6" +
    "\045\uffc6\001\002\000\026\014\031\015\050\021\033\022" +
    "\043\026\032\027\047\037\025\043\045\044\056\045\034" +
    "\001\002\000\026\014\031\015\050\021\033\022\043\026" +
    "\032\027\047\037\025\043\045\044\056\045\034\001\002" +
    "\000\026\014\uffc4\015\uffc4\021\uffc4\022\uffc4\026\uffc4\027" +
    "\uffc4\037\uffc4\043\uffc4\044\uffc4\045\uffc4\001\002\000\026" +
    "\014\uffc2\015\uffc2\021\uffc2\022\uffc2\026\uffc2\027\uffc2\037" +
    "\uffc2\043\uffc2\044\uffc2\045\uffc2\001\002\000\026\014\uffc3" +
    "\015\uffc3\021\uffc3\022\uffc3\026\uffc3\027\uffc3\037\uffc3\043" +
    "\uffc3\044\uffc3\045\uffc3\001\002\000\026\014\031\015\050" +
    "\021\033\022\043\026\032\027\047\037\025\043\045\044" +
    "\056\045\034\001\002\000\026\014\031\015\050\021\033" +
    "\022\043\026\032\027\047\037\025\043\045\044\056\045" +
    "\034\001\002\000\026\014\031\015\050\021\033\022\043" +
    "\026\032\027\047\037\025\043\045\044\056\045\034\001" +
    "\002\000\026\014\uffc5\015\uffc5\021\uffc5\022\uffc5\026\uffc5" +
    "\027\uffc5\037\uffc5\043\uffc5\044\uffc5\045\uffc5\001\002\000" +
    "\026\014\031\015\050\021\033\022\043\026\032\027\047" +
    "\037\025\043\045\044\056\045\034\001\002\000\026\004" +
    "\uffe0\012\uffe0\013\uffe0\017\uffe0\020\uffe0\023\uffe0\026\032" +
    "\027\047\040\uffe0\041\uffe0\001\002\000\026\004\uffdf\012" +
    "\uffdf\013\uffdf\017\uffdf\020\uffdf\023\uffdf\026\032\027\047" +
    "\040\uffdf\041\uffdf\001\002\000\046\004\uffdb\012\uffdb\013" +
    "\uffdb\017\uffdb\020\uffdb\023\uffdb\024\072\025\071\026\uffdb" +
    "\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035" +
    "\uffdb\040\uffdb\041\uffdb\001\002\000\026\004\uffe3\012\uffe3" +
    "\013\uffe3\017\uffe3\020\uffe3\023\uffe3\026\032\027\047\040" +
    "\uffe3\041\uffe3\001\002\000\026\004\uffe2\012\uffe2\013\uffe2" +
    "\017\uffe2\020\uffe2\023\uffe2\026\032\027\047\040\uffe2\041" +
    "\uffe2\001\002\000\026\004\uffde\012\uffde\013\uffde\017\uffde" +
    "\020\uffde\023\uffde\026\032\027\047\040\uffde\041\uffde\001" +
    "\002\000\026\004\uffe1\012\uffe1\013\uffe1\017\uffe1\020\uffe1" +
    "\023\uffe1\026\032\027\047\040\uffe1\041\uffe1\001\002\000" +
    "\046\004\uffdc\012\uffdc\013\uffdc\017\uffdc\020\uffdc\023\uffdc" +
    "\024\072\025\071\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032" +
    "\uffdc\033\uffdc\034\uffdc\035\uffdc\040\uffdc\041\uffdc\001\002" +
    "\000\004\040\132\001\002\000\046\004\uffce\012\uffce\013" +
    "\uffce\017\uffce\020\uffce\023\uffce\024\uffce\025\uffce\026\uffce" +
    "\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce\034\uffce\035" +
    "\uffce\040\uffce\041\uffce\001\002\000\030\014\031\015\050" +
    "\016\035\021\033\022\043\026\032\027\047\037\025\043" +
    "\045\044\056\045\034\001\002\000\004\040\135\001\002" +
    "\000\004\041\136\001\002\000\012\005\006\006\015\010" +
    "\014\045\020\001\002\000\020\002\uffef\005\uffef\006\uffef" +
    "\007\140\010\uffef\042\uffef\045\uffef\001\002\000\004\041" +
    "\136\001\002\000\016\002\ufff0\005\ufff0\006\ufff0\010\ufff0" +
    "\042\ufff0\045\ufff0\001\002\000\014\005\006\006\015\010" +
    "\014\042\144\045\020\001\002\000\016\002\ufffd\005\ufffd" +
    "\006\ufffd\010\ufffd\042\ufffd\045\ufffd\001\002\000\020\002" +
    "\uffff\005\uffff\006\uffff\007\uffff\010\uffff\042\uffff\045\uffff" +
    "\001\002\000\004\011\146\001\002\000\030\014\031\015" +
    "\050\016\035\021\033\022\043\026\032\027\047\037\025" +
    "\043\045\044\056\045\034\001\002\000\004\012\150\001" +
    "\002\000\030\014\031\015\050\016\035\021\033\022\043" +
    "\026\032\027\047\037\025\043\045\044\056\045\034\001" +
    "\002\000\006\013\152\041\136\001\002\000\030\014\031" +
    "\015\050\016\035\021\033\022\043\026\032\027\047\037" +
    "\025\043\045\044\056\045\034\001\002\000\016\002\uffed" +
    "\005\uffed\006\uffed\010\uffed\042\uffed\045\uffed\001\002\000" +
    "\004\041\136\001\002\000\016\002\uffee\005\uffee\006\uffee" +
    "\010\uffee\042\uffee\045\uffee\001\002\000\004\002\000\001" +
    "\002\000\016\002\ufffc\005\ufffc\006\ufffc\010\ufffc\042\ufffc" +
    "\045\ufffc\001\002\000\030\014\031\015\050\016\035\021" +
    "\033\022\043\026\032\027\047\037\025\043\045\044\056" +
    "\045\034\001\002\000\004\040\162\001\002\000\004\004" +
    "\ufff4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\160\000\030\003\010\005\004\006\003\007\007\010" +
    "\016\011\011\012\006\013\012\014\015\015\020\016\021" +
    "\001\001\000\002\001\001\000\024\006\142\007\007\010" +
    "\016\011\011\012\006\013\012\014\015\015\020\016\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\017\045\020\052\021\026\022" +
    "\041\023\056\024\037\025\035\026\043\027\027\030\025" +
    "\031\051\032\036\037\050\046\054\047\057\052\040\053" +
    "\053\001\001\000\002\001\001\000\044\017\130\020\052" +
    "\021\026\022\041\023\056\024\037\025\035\026\043\027" +
    "\027\030\025\031\051\032\036\037\050\046\054\047\057" +
    "\052\040\053\053\001\001\000\022\040\107\041\113\042" +
    "\106\043\115\044\117\045\104\052\103\053\114\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\036" +
    "\063\001\001\000\014\020\052\021\026\032\101\046\054" +
    "\047\057\001\001\000\004\034\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\020\052\021" +
    "\026\026\075\027\027\030\025\031\051\032\036\046\054" +
    "\047\057\052\040\053\053\001\001\000\006\050\072\051" +
    "\067\001\001\000\002\001\001\000\014\020\052\021\026" +
    "\032\066\046\054\047\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\035\060\001\001\000\002\001\001" +
    "\000\036\020\052\021\026\024\062\025\035\026\043\027" +
    "\027\030\025\031\051\032\036\037\050\046\054\047\057" +
    "\052\040\053\053\001\001\000\002\001\001\000\004\036" +
    "\063\001\001\000\034\020\052\021\026\025\065\026\043" +
    "\027\027\030\025\031\051\032\036\037\050\046\054\047" +
    "\057\052\040\053\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\020\052\021\026\027" +
    "\074\032\036\046\054\047\057\052\040\053\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\020\052\021" +
    "\026\027\073\032\036\046\054\047\057\052\040\053\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\020\052\021\026\023\100\024\037\025\035" +
    "\026\043\027\027\030\025\031\051\032\036\037\050\046" +
    "\054\047\057\052\040\053\053\001\001\000\002\001\001" +
    "\000\004\035\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\020\052\021\026\027\027\031\127\032\036" +
    "\046\054\047\057\052\040\053\053\001\001\000\026\020" +
    "\052\021\026\027\027\030\126\031\051\032\036\046\054" +
    "\047\057\052\040\053\053\001\001\000\002\001\001\000" +
    "\026\020\052\021\026\027\027\030\125\031\051\032\036" +
    "\046\054\047\057\052\040\053\053\001\001\000\026\020" +
    "\052\021\026\027\027\030\124\031\051\032\036\046\054" +
    "\047\057\052\040\053\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\020\052\021\026" +
    "\027\027\030\123\031\051\032\036\046\054\047\057\052" +
    "\040\053\053\001\001\000\024\020\052\021\026\027\027" +
    "\031\122\032\036\046\054\047\057\052\040\053\053\001" +
    "\001\000\026\020\052\021\026\027\027\030\121\031\051" +
    "\032\036\046\054\047\057\052\040\053\053\001\001\000" +
    "\002\001\001\000\026\020\052\021\026\027\027\030\120" +
    "\031\051\032\036\046\054\047\057\052\040\053\053\001" +
    "\001\000\006\052\103\053\114\001\001\000\006\052\103" +
    "\053\114\001\001\000\006\050\072\051\067\001\001\000" +
    "\006\052\103\053\114\001\001\000\006\052\103\053\114" +
    "\001\001\000\006\052\103\053\114\001\001\000\006\052" +
    "\103\053\114\001\001\000\006\050\072\051\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\017\133\020" +
    "\052\021\026\022\041\023\056\024\037\025\035\026\043" +
    "\027\027\030\025\031\051\032\036\037\050\046\054\047" +
    "\057\052\040\053\053\001\001\000\002\001\001\000\004" +
    "\004\136\001\001\000\026\005\141\006\003\007\007\010" +
    "\016\011\011\012\006\013\012\014\015\015\020\016\021" +
    "\001\001\000\002\001\001\000\004\004\140\001\001\000" +
    "\002\001\001\000\024\006\142\007\007\010\016\011\011" +
    "\012\006\013\012\014\015\015\020\016\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\017\146\020\052\021\026\022\041\023\056\024\037\025" +
    "\035\026\043\027\027\030\025\031\051\032\036\037\050" +
    "\046\054\047\057\052\040\053\053\001\001\000\002\001" +
    "\001\000\044\017\150\020\052\021\026\022\041\023\056" +
    "\024\037\025\035\026\043\027\027\030\025\031\051\032" +
    "\036\037\050\046\054\047\057\052\040\053\053\001\001" +
    "\000\004\004\152\001\001\000\044\017\153\020\052\021" +
    "\026\022\041\023\056\024\037\025\035\026\043\027\027" +
    "\030\025\031\051\032\036\037\050\046\054\047\057\052" +
    "\040\053\053\001\001\000\002\001\001\000\004\004\154" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\017\160\020\052\021\026\022\041\023\056" +
    "\024\037\025\035\026\043\027\027\030\025\031\051\032" +
    "\036\037\050\046\054\047\057\052\040\053\053\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SyntaxParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SyntaxParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SyntaxParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SyntaxParser$actions {
  private final SyntaxParser parser;

  /** Constructor */
  CUP$SyntaxParser$actions(SyntaxParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SyntaxParser$do_action(
    int                        CUP$SyntaxParser$act_num,
    java_cup.runtime.lr_parser CUP$SyntaxParser$parser,
    java.util.Stack            CUP$SyntaxParser$stack,
    int                        CUP$SyntaxParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SyntaxParser$result;

      /* select the action based on the action number */
      switch (CUP$SyntaxParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // true_logic_literal ::= KEYWORD_SHIN 
            {
              Token RESULT = null;

              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(37/*true_logic_literal*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // false_logic_literal ::= KEYWORD_NISE 
            {
              Token RESULT = null;

              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(36/*false_logic_literal*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // sub_operator ::= HYPHEN 
            {
              Token RESULT = null;

              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(41/*sub_operator*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // add_operator ::= PLUS 
            {
              Token RESULT = null;

              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(40/*add_operator*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // div_operator ::= SLASH 
            {
              Token RESULT = null;

              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(39/*div_operator*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // product_operator ::= ASTERISK 
            {
              Token RESULT = null;

              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(38/*product_operator*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // less_then_operator ::= LESS_THEN 
            {
              Token RESULT = null;

              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(35/*less_then_operator*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // greater_then_operator ::= GREATER_THEN 
            {
              Token RESULT = null;

              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(34/*greater_then_operator*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // greater_then_or_equals_operator ::= GREATER_THEN_EQUALS 
            {
              Token RESULT = null;

              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(33/*greater_then_or_equals_operator*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // less_then_or_equals_operator ::= LESS_THEN_EQUALS 
            {
              Token RESULT = null;

              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(32/*less_then_or_equals_operator*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // equals_operator ::= DOUBLE_EQUALS 
            {
              Token RESULT = null;

              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(31/*equals_operator*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // not_equals_operator ::= EXCLAMATION_EQUALS 
            {
              Token RESULT = null;

              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(30/*not_equals_operator*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // not_operator ::= KEYWORD_SHINAI 
            {
              Token RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = o; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(29/*not_operator*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // and_operator ::= KEYWORD_MO 
            {
              Token RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = o; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(28/*and_operator*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // or_operator ::= KEYWORD_MATA 
            {
              Token RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = o; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(27/*or_operator*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // concat_operator ::= PERIOD 
            {
              Token RESULT = null;

              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(26/*concat_operator*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // assignment_operator ::= COLON_EQUALS 
            {
              Token RESULT = null;

              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(25/*assignment_operator*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // primitive_value ::= input_line 
            {
              Value RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = v; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(24/*primitive_value*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // primitive_value ::= input_value 
            {
              Value RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = v; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(24/*primitive_value*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // primitive_value ::= OPEN_PARENTHESIS value CLOSE_PARENTHESIS 
            {
              Value RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).value;
		 RESULT = v; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(24/*primitive_value*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // primitive_value ::= IDENTIFIER 
            {
              Value RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new VariableValue(id); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(24/*primitive_value*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // primitive_value ::= false_logic_literal 
            {
              Value RESULT = null;
		 RESULT = new BooleanLiteral(false); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(24/*primitive_value*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // primitive_value ::= true_logic_literal 
            {
              Value RESULT = null;
		 RESULT = new BooleanLiteral(true); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(24/*primitive_value*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // primitive_value ::= NUMBER_LITERAL 
            {
              Value RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new NumberLiteral(c); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(24/*primitive_value*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // primitive_value ::= TEXT_LITERAL 
            {
              Value RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new TextLiteral(c); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(24/*primitive_value*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // aritm_unary_expression ::= primitive_value 
            {
              Value RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Value e = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = e; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(21/*aritm_unary_expression*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // aritm_unary_expression ::= sub_operator primitive_value 
            {
              Value RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Value a = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new UnarySubExpression(a); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(21/*aritm_unary_expression*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // aritm_unary_expression ::= add_operator primitive_value 
            {
              Value RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Value a = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new UnaryAddExpression(a); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(21/*aritm_unary_expression*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // aritm_mult_expression ::= aritm_unary_expression 
            {
              Value RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Value e = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = e; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(23/*aritm_mult_expression*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // aritm_mult_expression ::= aritm_mult_expression div_operator aritm_unary_expression 
            {
              Value RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).right;
		Value a = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Value b = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new DivExpression(a, b); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(23/*aritm_mult_expression*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // aritm_mult_expression ::= aritm_mult_expression product_operator aritm_unary_expression 
            {
              Value RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).right;
		Value a = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Value b = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new ProductExpression(a, b); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(23/*aritm_mult_expression*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // aritm_add_binary_expression ::= aritm_mult_expression 
            {
              Value RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Value e = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = e; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(22/*aritm_add_binary_expression*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // aritm_add_binary_expression ::= aritm_add_binary_expression sub_operator aritm_mult_expression 
            {
              Value RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).right;
		Value a = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Value b = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new SubExpression(a, b); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(22/*aritm_add_binary_expression*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // aritm_add_binary_expression ::= aritm_add_binary_expression add_operator aritm_mult_expression 
            {
              Value RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).right;
		Value a = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Value b = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new AddExpression(a, b); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(22/*aritm_add_binary_expression*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // rel_expression ::= aritm_add_binary_expression 
            {
              Value RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Value e = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = e; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(20/*rel_expression*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // rel_expression ::= aritm_add_binary_expression less_then_or_equals_operator aritm_add_binary_expression 
            {
              Value RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).right;
		Value a = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Value b = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new LessThenOrEqualsExpression(a, b); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(20/*rel_expression*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // rel_expression ::= aritm_add_binary_expression greater_then_or_equals_operator aritm_add_binary_expression 
            {
              Value RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).right;
		Value a = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Value b = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new GreaterThenOrEqualsExpression(a, b); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(20/*rel_expression*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // rel_expression ::= aritm_add_binary_expression greater_then_operator aritm_add_binary_expression 
            {
              Value RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).right;
		Value a = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Value b = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new GreaterThenExpression(a, b); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(20/*rel_expression*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // rel_expression ::= aritm_add_binary_expression less_then_operator aritm_add_binary_expression 
            {
              Value RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).right;
		Value a = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Value b = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new LessThenExpression(a, b); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(20/*rel_expression*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // rel_expression ::= aritm_add_binary_expression not_equals_operator aritm_add_binary_expression 
            {
              Value RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).right;
		Value a = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Value b = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new NotEqualsExpression(a, b); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(20/*rel_expression*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // rel_expression ::= aritm_add_binary_expression equals_operator aritm_add_binary_expression 
            {
              Value RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).right;
		Value a = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Value b = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new EqualsExpression(a, b); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(20/*rel_expression*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // logic_not_expression ::= rel_expression 
            {
              Value RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Value e = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = e; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(19/*logic_not_expression*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // logic_not_expression ::= not_operator rel_expression 
            {
              Value RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Value a = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new NotExpression(a); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(19/*logic_not_expression*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // logic_and_expression ::= logic_not_expression 
            {
              Value RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Value e = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = e; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(18/*logic_and_expression*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // logic_and_expression ::= logic_and_expression and_operator logic_not_expression 
            {
              Value RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).right;
		Value a = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Value b = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new AndExpression(a, b); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(18/*logic_and_expression*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // logic_or_expression ::= logic_and_expression 
            {
              Value RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Value e = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = e; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(17/*logic_or_expression*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // logic_or_expression ::= logic_or_expression or_operator logic_and_expression 
            {
              Value RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).right;
		Value a = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Value b = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new OrExpression(a, b); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(17/*logic_or_expression*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // concat_expression ::= logic_or_expression 
            {
              Value RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Value e = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = e; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(16/*concat_expression*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // concat_expression ::= concat_expression concat_operator logic_or_expression 
            {
              Value RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).right;
		Value a = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Value b = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new ConcatExpression(a, b); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(16/*concat_expression*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // value ::= concat_expression 
            {
              Value RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Value e = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = e; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(13/*value*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // repeat_structure ::= KEYWORD_TAMENI IDENTIFIER KEYWORD_KARA value KEYWORD_MADE value context_block 
            {
              Instruction RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-5)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-5)).value;
		int fromleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-3)).left;
		int fromright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-3)).right;
		Value from = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-3)).value;
		int toleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).left;
		int toright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).right;
		Value to = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).value;
		int loopContextleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int loopContextright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Context loopContext = (Context)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new RepeatStructure(id, from, to, loopContext); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(12/*repeat_structure*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // repeat_structure ::= KEYWORD_TAMENI IDENTIFIER KEYWORD_KARA value KEYWORD_MADE value KEYWORD_HO value context_block 
            {
              Instruction RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-7)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-7)).value;
		int fromleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-5)).left;
		int fromright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-5)).right;
		Value from = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-5)).value;
		int toleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-3)).left;
		int toright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-3)).right;
		Value to = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-3)).value;
		int stepleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).left;
		int stepright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).right;
		Value step = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).value;
		int loopContextleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int loopContextright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Context loopContext = (Context)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new RepeatStructure(id, from, to, step, loopContext); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(12/*repeat_structure*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // simple_conditional_structure ::= KEYWORD_MOSHI OPEN_PARENTHESIS value CLOSE_PARENTHESIS context_block 
            {
              Instruction RESULT = null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).right;
		Value condition = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).value;
		int thenContextleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int thenContextright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Context thenContext = (Context)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new ConditionalStructure(condition, thenContext); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(10/*simple_conditional_structure*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // complete_conditional_structure ::= KEYWORD_MOSHI OPEN_PARENTHESIS value CLOSE_PARENTHESIS context_block KEYWORD_SOREIGAI context_block 
            {
              Instruction RESULT = null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-4)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-4)).right;
		Value condition = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-4)).value;
		int thenContextleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left;
		int thenContextright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).right;
		Context thenContext = (Context)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).value;
		int elseContextleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int elseContextright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Context elseContext = (Context)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new ConditionalStructure(condition, thenContext, elseContext); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(11/*complete_conditional_structure*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // conditional_structure ::= simple_conditional_structure 
            {
              Instruction RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Instruction s = (Instruction)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = s; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(9/*conditional_structure*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // conditional_structure ::= complete_conditional_structure 
            {
              Instruction RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Instruction s = (Instruction)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = s; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(9/*conditional_structure*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // assign_command ::= IDENTIFIER assignment_operator value 
            {
              Instruction RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new AssignCommand(i, v); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(7/*assign_command*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // output_command ::= KEYWORD_KAKU OPEN_PARENTHESIS value CLOSE_PARENTHESIS 
            {
              Instruction RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).value;
		 RESULT = new OutputCommand(v); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(6/*output_command*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // input_line ::= DOUBLE_QUESTION_MARK 
            {
              Value RESULT = null;
		 RESULT = new InputLine(); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(15/*input_line*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // input_value ::= QUESTION_MARK 
            {
              Value RESULT = null;
		 RESULT = new InputValue(); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(14/*input_value*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // structure ::= repeat_structure 
            {
              Instruction RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Instruction s = (Instruction)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = s; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(8/*structure*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // structure ::= conditional_structure 
            {
              Instruction RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Instruction s = (Instruction)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = s; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(8/*structure*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // command ::= assign_command 
            {
              Instruction RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = c; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(5/*command*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // command ::= output_command 
            {
              Instruction RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = c; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(5/*command*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruction ::= structure 
            {
              Instruction RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Instruction s = (Instruction)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = s; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(4/*instruction*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruction ::= command SEMICOLON 
            {
              Instruction RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).value;
		 RESULT = c; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(4/*instruction*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // context ::= context instruction 
            {
              Context RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).right;
		Context c = (Context)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 c.addInstruction(i); RESULT = c; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(3/*context*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // context ::= instruction 
            {
              Context RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new Context(i); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(3/*context*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // context_block ::= OPEN_BRACE context CLOSE_BRACE 
            {
              Context RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).right;
		Context s = (Context)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).value;
		 RESULT = s; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(2/*context_block*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).value;
		RESULT = start_val;
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$SyntaxParser$parser.done_parsing();
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= context 
            {
              Program RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Context s = (Context)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		
    RESULT = new Program(s);

    RESULT.run();

              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

